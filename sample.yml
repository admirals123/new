using StackExchange.Redis;
using Azure.Identity;

namespace RedisCacheDemo
{
    class Program
    {
        static async Task Main(string[] args)
        {
            // ***** Important: Replace Placeholders *****
            var redisCacheName = "<YOUR_REDIS_CACHE_NAME>";

            // Get hostname and port from connection string template 
            var template = $"{redisCacheName}.redis.cache.windows.net:6380,password=,ssl=True,abortConnect=False";
            string[] parts = template.Split(',');
            string hostname = parts[0].Split(':')[0];
            int port = Convert.ToInt32(parts[0].Split(':')[1]);

            // Configure Redis connection
            ConfigurationOptions options = new ConfigurationOptions
            {
                EndPoints = { { hostname, port } },
                Ssl = true,
                AbortOnConnectFail = false 
            };

            // Modify the connection setup using OnConfiguring
            options.EndPoints.OnConfiguring = (endpoint, configuration) => { 
                var credential = new DefaultAzureCredential();
                string token = credential.GetToken(new Azure.Core.TokenRequestContext(new[] { "https://management.azure.com/" })).Token; 
                configuration.Password = token;
            };

            // Connect to Azure Redis Cache
            ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(options);
            IDatabase db = redis.GetDatabase();

            // ***** Redis Operations *****
            // Example: Set a key-value pair
            await db.StringSetAsync("message:hello", "world");

            // Example: Get the value
            string value = await db.StringGetAsync("message:hello");
            Console.WriteLine(value); 
        }
    }
}
