using StackExchange.Redis;

namespace RedisTest
{
    class Program
    {
        static async Task Main(string[] args)
        {
            // Get sensitive values from Azure Key Vault (recommended) or environment variables
            var cacheHostName = Environment.GetEnvironmentVariable("AZURE_CACHE_FOR_REDIS_HOST_NAME");
            if (string.IsNullOrEmpty(cacheHostName)) throw new Exception("AZURE_CACHE_FOR_REDIS_HOST_NAME is empty");

            // Use TokenCredential from Azure.Identity for Managed Identity authentication
            var tokenCredential = new DefaultAzureCredential();

            // Configure connection options
            var config = new ConfigurationOptions
            {
                EndPoints = { cacheHostName + ":6380" },
                Ssl = true,
                Password = tokenCredential, // Fetch access key via managed identity
                AllowAdmin = true // Might be needed for certain commands
            };

            using (var redis = ConnectionMultiplexer.Connect(config))
            {
                IDatabase db = redis.GetDatabase();

                // PING command
                Console.WriteLine("\nCache command: PING");
                Console.WriteLine("Cache response : " + await db.ExecuteAsync("PING"));

                // GET
                Console.WriteLine("\nCache command: GET Message");
                Console.WriteLine("Cache response : " + await db.StringGetAsync("Message"));

                // SET
                Console.WriteLine("\nCache command: SET Message");
                Console.WriteLine("Cache response : " + await db.StringSetAsync("Message", "Hello! The cache is working from C#!"));

                // GET again
                Console.WriteLine("\nCache command: GET Message");
                Console.WriteLine("Cache response : " + await db.StringGetAsync("Message"));

                // Client list
                Console.WriteLine("\nCache command: CLIENT LIST");
                Console.WriteLine("Cache response : " + await db.ExecuteAsync("CLIENT", "LIST"));
            }

            Console.WriteLine("Done");
        }
    }
}
